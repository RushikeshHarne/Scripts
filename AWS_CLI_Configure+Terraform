#!/bin/bash

# Installs & configures AWS CLI based on your OS and credentials.  
# Checks for Terraform and installs it if not present.  
# Prepares both tools for immediate cloud infrastructure use.


# ====== AWS CLI INSTALLATION FUNCTIONS ======
install_awscli_linux() {
    echo "Installing AWS CLI on Linux..."
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    if ! command -v unzip &> /dev/null; then
        echo "Installing unzip..."
        sudo apt-get update && sudo apt-get install -y unzip
    fi
    unzip awscliv2.zip
    sudo ./aws/install
    rm -rf aws awscliv2.zip
    echo "✅ AWS CLI installed on Linux."
}

install_awscli_rhel() {
    echo "Installing AWS CLI on RHEL..."
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    if ! command -v unzip &> /dev/null; then
        echo "Installing unzip..."
        sudo yum install -y unzip
    fi
    unzip awscliv2.zip
    sudo ./aws/install
    rm -rf aws awscliv2.zip
    echo "✅ AWS CLI installed on RHEL."
}

install_awscli_mac() {
    echo "Installing AWS CLI on macOS..."
    brew install awscli
    echo "✅ AWS CLI installed on macOS."
}

install_awscli_wsl() {
    echo "Installing AWS CLI on WSL..."
    install_awscli_linux
}

install_awscli_based_on_os() {
    OS="$(uname -s)"
    case "$OS" in
        Linux*)
            if grep -qi "rhel" /etc/os-release; then
                install_awscli_rhel
            else
                install_awscli_linux
            fi
            ;;
        Darwin*)
            install_awscli_mac
            ;;
        *)
            if grep -qi "microsoft" /proc/version; then
                install_awscli_wsl
            else
                echo "❌ Unsupported OS. Install AWS CLI manually."
                exit 1
            fi
            ;;
    esac
}

# ====== CHECK AWS CLI AND INSTALL IF NEEDED ======
if ! command -v aws &> /dev/null; then
    install_awscli_based_on_os
else
    echo "✅ AWS CLI already installed."
fi

# ====== CONFIGURE AWS CLI ======
echo "Enter your AWS Access Key ID:"
read AWS_ACCESS_KEY_ID
[ -z "$AWS_ACCESS_KEY_ID" ] && echo "Access Key ID is required. Exiting." && exit 1

echo "Enter your AWS Secret Access Key:"
read AWS_SECRET_ACCESS_KEY
[ -z "$AWS_SECRET_ACCESS_KEY" ] && echo "Secret Access Key is required. Exiting." && exit 1

echo "Enter your AWS Region (e.g., us-east-1):"
read AWS_REGION
[ -z "$AWS_REGION" ] && echo "Region is required. Exiting." && exit 1

aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
aws configure set region "$AWS_REGION"

echo "✅ AWS CLI configured:"
aws configure list
echo "Logged in as: $(aws sts get-caller-identity --query 'Arn' --output text)"

# ====== CHECK IF TERRAFORM IS ALREADY INSTALLED ======
if command -v terraform &> /dev/null; then
    echo "✅ Terraform is already installed. Version: $(terraform version)"
else
    # ====== TERRAFORM INSTALLATION FUNCTION ======
    install_terraform() {
        TERRAFORM_VERSION="1.7.5"
        OS="$(uname -s)"

        if [[ "$OS" == "Linux" ]]; then
            if grep -qi "rhel" /etc/os-release; then
                echo "Installing Terraform on RHEL..."
                sudo yum install -y wget unzip
            else
                echo "Installing Terraform on Ubuntu/Linux..."
                sudo apt-get update && sudo apt-get install -y wget unzip
            fi
            wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
            unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
            echo "✅ Terraform installed: $(terraform version)"
        elif [[ "$OS" == "Darwin" ]]; then
            echo "Installing Terraform on macOS..."
            brew tap hashicorp/tap
            brew install hashicorp/tap/terraform
            echo "✅ Terraform installed: $(terraform version)"
        else
            echo "❌ Unsupported OS for Terraform installation."
        fi
    }

    # ====== PROMPT FOR TERRAFORM INSTALL ======
    echo ""
    read -p "Do you want to install Terraform now? (yes/no): " INSTALL_TF
    if [[ "$INSTALL_TF" == "yes" ]]; then
        install_terraform
    else
        echo "Terraform installation skipped."
    fi
fi
